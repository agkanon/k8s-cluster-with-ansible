---
- hosts: all
  vars_files:
  - env_variables 
  tasks:
  - name: Creating a repository file for Kubernetes
    file:
     path: /etc/yum.repos.d/kubernetes.repo
     state: touch

  - name: Adding repository details in Kubernetes repo file.
    blockinfile:
     path: /etc/yum.repos.d/kubernetes.repo
     block: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: Install kubelet, kubeadm and kubectl
    shell: yum -y install epel-release vim git curl wget kubelet kubeadm kubectl --disableexcludes=kubernetes


  - name: SELinux Configuration
    shell: sed -i 's/^SELINUX=.*/SELINUX=permissive/g' /etc/selinux/config
    
  - name: Enabling Bridge Firewall Rule
    shell: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
 
  - name: Creating a Kernel configuration file for Kubernetes
    file:
     path: /etc/sysctl.d/kubernetes.conf
     state: touch
  
  - name: Kernel parameter as required by Kubernetes
    blockinfile:
     path: /etc/sysctl.d/kubernetes.conf
     block: |
           net.ipv4.ip_forward = 1
           net.bridge.bridge-nf-call-ip6tables = 1
           net.bridge.bridge-nf-call-iptables = 1

  - name: Reload Kernel parameter configuration files
    shell: |
      modprobe br_netfilter
      sysctl --system

  - name: Reload Kernel parameter configuration files
    shell: |
      yum install -y yum-utils device-mapper-persistent-data lvm2
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      yum install -y docker-ce docker-ce-cli containerd.io
  
  - name: Reload Kernel parameter configuration files
    shell: |
      mkdir /etc/docker
      mkdir -p /etc/systemd/system/docker.service.d


  - name: Check that the /etc/docker/daemon.json exists
    stat:
      path: /etc/docker/daemon.json
    register: stat_result

  - block:
    - name: load var from file
      slurp:
        src: /etc/docker/daemon.json
      register: docker_vars

    - debug:
        msg: "{{ docker_vars.content|b64decode|from_json }}"

    - name: append more key/values
      set_fact:
        docker_vars: "{{ docker_vars.content|b64decode|from_json }}"


    - name: append more key/values
      set_fact:
        docker_vars: "{{ docker_vars | default([]) | combine({ item.key : item.value }) }}"
      with_items:
      - { key: "exec-opts", value: ["native.cgroupdriver=systemd"] }
      - { key: "log-driver", value:  "json-file" }
      - { key: "log-opts", value: "max-size": "100m" }
      - { key: "storage-driver", value:  "overlay2" }
      - { key: "storage-opts", value: "overlay2.override_kernel_check=true" }
      


    - debug:
        var: docker_vars

    - name: write var to file
      copy:
        content: "{{ docker_vars | to_nice_json }}"
        dest: /etc/docker/daemon.json
    when: stat_result.stat.exists == true

  - name: Start and enable Docker and kublet
    shell: |
      systemctl daemon-reload 
      systemctl restart docker
      systemctl enable docker
      systemctl enable kubelet